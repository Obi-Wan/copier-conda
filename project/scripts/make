#!/usr/bin/env python3
"""Management commands."""

import os
import shutil
import subprocess
import sys
from pathlib import Path

try:
    # TODO: Remove once support for Python 3.10 is dropped.
    if sys.version_info >= (3, 11):
        import tomllib
    else:
        import tomli as tomllib
except ImportError:
    print("Could not import tomli/tomlib, please install the package 'build', and then retry")


def shell(cmd: str) -> None:
    """Run a shell command."""
    subprocess.run(cmd, shell=True, check=True)  # noqa: S602


def conda_install() -> None:
    """Install dependencies using conda."""
    with open("pyproject.toml", "r", encoding="utf-8") as fid:
        pyproject = tomllib.loads(fid.read())
    devdeps = [line.strip() for line in pyproject["project"]["optional-dependencies"]["dev"]]
    devdeps = [line for line in devdeps if line and not line.startswith(("-e", "#")) and line != ""]

    shell(f"conda install {pyproject['project']['name']} --use-local --only-deps")
    if "CI" not in os.environ:
        shell(f"conda install {' '.join(devdeps)}")
        shell("pip install --no-deps -e .")
    else:
        shell("pip install --no-deps .")


def setup() -> None:
    """Setup the project."""
    if not shutil.which("conda"):
        raise ValueError("make: setup: you should be in a conda environment to proceed.")
    pkgs_to_install = [pkg for pkg in ["build", "twine"] if not shutil.which(pkg)]
    shell("conda install " + " ".join(pkgs_to_install))

    print("Installing dependencies (default environment)")  # noqa: T201
    conda_install()


def clean() -> None:
    """Delete build artifacts and cache files."""
    paths_to_clean = ["build", "dist", "htmlcov", "site", ".coverage*"]
    for path in paths_to_clean:
        shell(f"rm -rf {path}")

    cache_dirs = [".cache", ".pytest_cache", ".mypy_cache", ".ruff_cache", "__pycache__"]
    for dirpath in Path(".").rglob("*"):
        if any(dirpath.match(pattern) for pattern in cache_dirs) and not (dirpath.match(".venv") or dirpath.match(".venvs")):
            shutil.rmtree(path, ignore_errors=True)


def main() -> int:
    """Main entry point."""
    args = list(sys.argv[1:])
    if not args or args[0] == "help":
        print("Available commands")  # noqa: T201
        print("  help           Print this help. Add task name to print help.")  # noqa: T201
        print("  setup          Setup environment (install dependencies).")  # noqa: T201
        print("  clean          Delete build artifacts and cache files.")  # noqa: T201
        return 0

    while args:
        cmd = args.pop(0)

        opts = []
        while args and (args[0].startswith("-") or "=" in args[0]):
            opts.append(args.pop(0))

        if cmd == "clean":
            clean()
        elif cmd == "setup":
            setup()

    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception:  # noqa: BLE001
        sys.exit(1)
